class Queries:
    def get_total_sales(self):
        # Define the SQL query to find the total sales
        sql = "SELECT SUM(Price) AS 'Total Sales' FROM Offer;"
        return sql

    def get_technician_with_most_fixes(self):
        # Define the SQL query to find the employee that fixed the most devices
        sql = "SELECT CONCAT(Employee.FirstName, ' ', Employee.LastName) AS EmployeeName, " \
              "COUNT(EmployeeDoesService.EmployeeId) AS DevicesFixed " \
              "FROM EmployeeDoesService " \
              "JOIN Employee ON EmployeeDoesService.EmployeeId = Employee.Id  " \
              "GROUP BY EmployeeDoesService.EmployeeId   " \
              "ORDER BY DevicesFixed DESC  " \
              "LIMIT 1;"
        return sql

    def get_profits_by_cashier(self):
        # Define the SQL query to show the profits generated by each cashier
        sql = "SELECT CONCAT(Employee.FirstName, ' ', Employee.LastName) AS EmployeeName, SUM(Offer.Price - Offer.Cost) AS TotalProfit " \
              "FROM Offer " \
              "JOIN StoreTransaction ON Offer.Id = StoreTransaction.OfferId " \
              "JOIN Employee ON Employee.Id = StoreTransaction.EmployeeId  " \
              "GROUP BY EmployeeName;"
        return sql

    def get_customer_with_most_visits(self):
        # Define the SQL query to find the customer who came to the store the most
        sql = "SELECT CONCAT(Customer.FirstName, ' ', Customer.LastName) as FullName, " \
              "COUNT(*) as TimesShopped " \
              "FROM StoreTransaction " \
              "JOIN Customer ON Customer.Id = StoreTransaction.CustomerId " \
              "GROUP BY StoreTransaction.CustomerId " \
              "ORDER BY TimesShopped DESC " \
              "LIMIT 1;"
        return sql

    def get_total_profit_on_date(self, date):
        # Define the SQL query to find the total profit on a specific date
        sql = f"SELECT SUM(Offer.Price - Offer.Cost) as TotalProfit " \
              f"FROM StoreTransaction " \
              f"JOIN Offer ON StoreTransaction.OfferId = Offer.Id " \
              f"WHERE StoreTransaction.Date = '{date}';"
        return sql

    def get_total_customers_in_month(self, month, year):
        # Define the SQL query to find the total number of customers in a specific month
        sql = f"SELECT COUNT(DISTINCT CustomerId) as TotalCustomers " \
              f"FROM StoreTransaction " \
              f"WHERE MONTH(Date) = {month} AND YEAR(Date) = {year};"
        return sql

    def get_most_expensive_product(self):
        # Define the SQL query to find the most expensive product
        sql = "SELECT Offer.Name, Offer.Price " \
              "FROM Offer " \
              "ORDER BY Offer.Price DESC " \
              "LIMIT 1;"
        return sql

    def get_employees_who_dont_fix_devices(self):
        # Define the SQL query to find employees who don't fix devices
        sql = "SELECT CONCAT(Employee.FirstName, ' ', Employee.LastName) AS EmployeeName " \
              "FROM Employee " \
              "LEFT JOIN EmployeeDoesService ON EmployeeDoesService.EmployeeId = Employee.Id " \
              "WHERE EmployeeDoesService.EmployeeId IS NULL;"
        return sql

    def get_customers_with_email(self):
        # Define the SQL query to find customers who have an email address
        sql = "SELECT CONCAT(Customer.FirstName, ' ', Customer.LastName) AS CustomerName, Customer.Email " \
              "FROM Customer " \
              "WHERE Customer.Email IS NOT NULL;"
        return sql

    def get_iphone_products_and_services(self):
        # Define the SQL query to find iPhone products and services
        sql = "SELECT Offer.Name, Offer.Price " \
              "FROM Offer " \
              "WHERE Offer.Name LIKE '%iPhone%';"
        return sql
